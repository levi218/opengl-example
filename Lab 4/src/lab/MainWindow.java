/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lab;

import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import javax.media.opengl.GL;
import javax.media.opengl.GL2;
import javax.media.opengl.GLAutoDrawable;
import javax.media.opengl.GLCapabilities;
import javax.media.opengl.GLEventListener;
import javax.media.opengl.GLProfile;
import javax.media.opengl.awt.GLJPanel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

public class MainWindow extends javax.swing.JFrame implements GLEventListener, VertexActionListener {

    /**
     * Creates new form MainWindow
     */
    ArrayList<GraphVertex> points;

    public Point getPointBezier(List<Point> P, int start, int end, double t) {
        if (start + 1 == end) {
            return P.get(start);
        } else {
            Point p0 = getPointBezier(P, start, end - 1, t);
            Point p1 = getPointBezier(P, start + 1, end, t);
            double x = (1 - t) * p0.getX() + t * p1.getX();
            double y = (1 - t) * p0.getY() + t * p1.getY();
            return new Point(x, y);
        }
    }

    @Override
    public void onVertexPositionChanged() {
        panel.repaint();
    }

    @Override
    public void display(GLAutoDrawable glad) {
        // draw base on settings
        final GL2 gl = glad.getGL().getGL2();
        gl.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT);

//        gl.glEnable(GL.GL_BLEND);
//        gl.glBlendFunc(GL.GL_SRC_ALPHA, GL.GL_ONE_MINUS_SRC_ALPHA);
        gl.glLoadIdentity();
        gl.glOrtho(0, panel.getSize().width, panel.getSize().height, 0, -1, 1);
        gl.glColor3d(255, 0, 0);
        gl.glPointSize(4.0f);
        gl.glLineWidth(3.0f);
        gl.glBegin(GL2.GL_LINE_STRIP);
        for (double t = 0; t <= 1; t += 0.005) {
            List<Point> P = points.stream().map((e) -> {
                return new Point(e.getCenteredX(), e.getCenteredY());
            }).collect(Collectors.toList());
            Point result = getPointBezier(P, 0, P.size(), t);
            gl.glVertex2d(result.getX(), result.getY());
        }
//        for (int i = 0; i < 4; i++) {
//            double x_dest = Math.cos(this.alpha) * x_arr[i] + Math.sin(this.alpha) * y_arr[i] + this.x;
//            double y_dest = -Math.sin(this.alpha) * x_arr[i] + Math.cos(this.alpha) * y_arr[i] + this.y;
//        }
        gl.glEnd();
//        recs.forEach((rec) -> {
//            rec.draw(gl);
//        });

//        gl.glDisable(GL.GL_BLEND);
    }
    final GLProfile gp = GLProfile.get(GLProfile.GL2);
    GLCapabilities cap = new GLCapabilities((gp));
    final GLJPanel panel = new GLJPanel(cap);

    public MainWindow() {
        initComponents();

        leftPanel.addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(ComponentEvent e) {
                panel.setSize(leftPanel.getWidth(), leftPanel.getHeight());
                panel.repaint();
                super.componentResized(e);
            }

        });
        // add GL panel to left side and set event listener to this class
        panel.setSize(leftPanel.getWidth(), leftPanel.getHeight());
        panel.addGLEventListener(this);
        leftPanel.add(panel);

        points = new ArrayList<>();

        addPoint(100, 100);
        addPoint(200, 100);
        addPoint(200, 200);
        addPoint(400, 100);

//        panel.repaint();
        leftPanel.repaint();

    }
    private int lastId = 0;

    private void addPoint(int x, int y) {
        GraphVertex gv = new GraphVertex(leftPanel, x, y, lastId);
        points.add(gv);
        gv.addVertexChangedListener(this);
        leftPanel.add(gv, 0);
        lastId += 1;
//        panel.repaint();
        leftPanel.repaint();
    }

    @Override
    public void onDelete(GraphVertex v) {
        points.remove(v);
        leftPanel.remove(v);
        leftPanel.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        leftPanel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Nguyen QH - Nguyen TTD - Lab 4 - Bezier Curve");

        leftPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        leftPanel.setForeground(new java.awt.Color(204, 0, 51));

        javax.swing.GroupLayout leftPanelLayout = new javax.swing.GroupLayout(leftPanel);
        leftPanel.setLayout(leftPanelLayout);
        leftPanelLayout.setHorizontalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 879, Short.MAX_VALUE)
        );
        leftPanelLayout.setVerticalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 482, Short.MAX_VALUE)
        );

        jButton1.setText("Add Point");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(leftPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addGap(12, 12, 12)
                .addComponent(leftPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        addPoint(100, 100);
    }//GEN-LAST:event_jButton1ActionPerformed

    @Override
    public void init(GLAutoDrawable glad) {
    }

    @Override
    public void dispose(GLAutoDrawable glad) {
    }

    @Override
    public void reshape(GLAutoDrawable glad, int i, int i1, int i2, int i3) {
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel leftPanel;
    // End of variables declaration//GEN-END:variables

}
